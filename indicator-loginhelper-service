#!/usr/bin/python3
import sys
import os
import logging
import logging.handlers
logger = logging.getLogger('LoginHelper')
logger.setLevel(logging.DEBUG)
handler = logging.handlers.SysLogHandler(address = '/dev/log')
logger.addHandler(handler)
os.environ["DISPLAY"] = ":0"

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Notify', '0.7')
from gi.repository import Gtk, Gio, GLib, Notify

class LoginHelperIndicator():

  def __init__(self, dbus_name, dbus_path):
    self.dbus_name = dbus_name
    self.dbus_path = dbus_path
    self.actions = Gio.SimpleActionGroup()
    self.menu = Gio.Menu()
    self.actions_export_id = 0
    self.menu_export_id = 0



  def activate_about (self, action, parameter):
    logger.debug("activate_about")
    dialog = Gtk.MessageDialog(
        parent         = None,
        type           = Gtk.MessageType.INFO,
        buttons        = Gtk.ButtonsType.OK,
        message_format = 'Mensaje de prueba')
    dialog.set_title('Prueba!')
    dialog.set_position(Gtk.WindowPosition.CENTER)
    dialog.run()
    dialog.destroy()

    # notification = Notify.Notification.new('Notificación de inicio de sesión', 'Aca se informa el detalle')
    # logger.debug("notification_created" + str(notification))
    # notification.show()
    # logger.debug("notification_sent")

  def activate_exit (self, action, parameter):
    #g_message ("exit the program");
    Gtk.main_quit()

  def on_bus_acquired (self, connection, name):
    logger.debug ('Bus acquired: ' + str(connection))
    error = None
    item = Gio.MenuItem()
    submenu = Gio.Menu()

    action_state = GLib.Variant("a{sv}", {
      'label': GLib.Variant("s", "Login-helper"),
      'icon':  GLib.Variant("s", "indicator-loginhelper"),
      'accessible-desc': GLib.Variant("s", "Login Helper indicator")
    })
    self.actions.add_action(Gio.SimpleAction.new_stateful("_header", None, action_state))
    about_action = Gio.SimpleAction.new("about", None)
    about_action.connect("activate", self.activate_about)
    self.actions.add_action(about_action)
    exit_action = Gio.SimpleAction.new("exit", None)
    exit_action.connect("activate", self.activate_exit)
    self.actions.add_action(exit_action)

    submenu.append("About", "indicator.about")
    submenu.append("Exit", "indicator.exit")
    item = Gio.MenuItem().new(None, "indicator._header")
    item.set_attribute_value("x-canonical-type", GLib.Variant("s", "com.canonical.indicator.root"))
    item.set_submenu(submenu)

    self.menu = Gio.Menu.new()
    self.menu.append_item(item)

    self.actions_export_id = connection.export_action_group(self.dbus_path, self.actions)
    if self.actions_export_id == 0:
      #g_warning ("cannot export action group: %s", error->message);
      #g_error_free (error);
      return

    self.menu_export_id = connection.export_menu_model(self.dbus_path + "/greeter", self.menu)
    if self.menu_export_id == 0:
      #g_warning ("cannot export menu: %s", error->message);
      #g_error_free (error);
      return


  def on_name_lost (self, connection, name):
    if self.actions_export_id:
      connection.unexport_action_group(self.actions_export_id)

    if (self.menu_export_id):
      connection.unexport_menu_model(self.menu_export_id)



if __name__ == '__main__':

  logger.debug('Login-Helper: Initializing Login Helper Indicator')
  for k, v in sorted(os.environ.items()):
    logger.debug('Login-Helper - ' + k + ':' + v)
  res_notify = Notify.init('com.canonical.indicator.loginhelper')
  logger.debug ('Login-helper: Notify: ' + str(res_notify))

  indicator = LoginHelperIndicator('com.canonical.indicator.loginhelper', '/com/canonical/indicator/loginhelper')
  res_own = Gio.bus_own_name(Gio.BusType.SESSION,
                indicator.dbus_name,
                Gio.BusNameOwnerFlags.NONE,
                indicator.on_bus_acquired,
                None,
                indicator.on_name_lost)
  logger.debug ('Login-Helper: bus_own_name: ' + str(res_own))

  Gtk.main()


  exit(0)

